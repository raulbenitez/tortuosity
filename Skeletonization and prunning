# Skeletonization
skeleton = skeletonize(dilated)

# Ploting the skeleton
plt.figure(figsize=(15,15))
plt.imshow(skeleton,cmap='Greys_r')

# Function that finds the endpoints where the prunning will start

def endPoints(skel):

    endpoint2=np.array([[0, 0, 0],
                        [0, 1, 2],
                        [0, 2, 1]])
    
    endpoint3=np.array([[0, 0, 2],
                        [0, 1, 1],
                        [0, 0, 2]])
    
    endpoint4=np.array([[0, 2, 1],
                        [0, 1, 2],
                        [0, 0, 0]])
    
    endpoint5=np.array([[2, 1, 2],
                        [0, 1, 0],
                        [0, 0, 0]])
    
    endpoint6=np.array([[1, 2, 0],
                        [2, 1, 0],
                        [0, 0, 0]])
    
    endpoint7=np.array([[2, 0, 0],
                        [1, 1, 0],
                        [2, 0, 0]])
    
    endpoint8=np.array([[0, 0, 0],
                        [2, 1, 0],
                        [1, 2, 0]])
    endpoint9=np.array([[0, 0, 0],      
                        [0, 1, 1],      
                        [1, 0, 1]])
    
    
    ep1=mh.morph.hitmiss(skel,endpoint1)
    ep2=mh.morph.hitmiss(skel,endpoint2)
    ep3=mh.morph.hitmiss(skel,endpoint3)
    ep4=mh.morph.hitmiss(skel,endpoint4)
    ep5=mh.morph.hitmiss(skel,endpoint5)
    ep6=mh.morph.hitmiss(skel,endpoint6)
    ep7=mh.morph.hitmiss(skel,endpoint7)
    ep8=mh.morph.hitmiss(skel,endpoint8)
    ep9=mh.morph.hitmiss(skel,endpoint9)
    ep = ep2+ep3+ep4+ep6+ep7+ep8+ep9
    return ep
    
# Main prunning function
    
    def pruning(skeleton, size):
    '''remove iteratively end points "size" 
       times from the skeleton
    '''
    for i in range(0, size):
        endpoints = endPoints(skeleton)
        endpoints = np.logical_not(endpoints)
        skeleton = np.logical_and(skeleton,endpoints)
    return skeleton
    
# Function that eliminates possible abnormalities in the upper part of the skeleton

def cleaningtop(branch):
    c=1
    for i in range(len(branch)):
            for j in range(len(branch)):
                if c<10:
                    if branch[i][j]==1:
                        branch[i][j]=0
                        c+=1
    return branch
            
# Same for the lower part
def cleaningbottom(branch):
    indexi=np.arange(branch.shape[0]-1,0,-1) # we start at the bottom
    indexj=np.arange(branch.shape[0]-1,0,-1)
    c=1
    for i in indexi:
        if c<20:
            for j in indexj:        
                if branch[i][j]==1:
                    branch[i][j]=0
                    c+=1
    return branch

